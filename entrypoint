#!/bin/bash

echo "broker.id=$KAFKA_BROKER_ID" >> /opt/kafka/config/server.properties

############################# Socket Server Settings #############################

# The address the socket server listens on. If not configured, the host name will be equal to the value of
# java.net.InetAddress.getCanonicalHostName(), with PLAINTEXT listener name, and port 9092.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092

# Listener name, hostname and port the broker will advertise to clients.
# If not set, it uses the value for "listeners".
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

echo "num.network.threads=$KAFKA_NUM_NETWORK_THREADS" >> /opt/kafka/config/server.properties
echo "num.io.threads=$KAFKA_NUM_IO_THREADS" >> /opt/kafka/config/server.properties
echo "socket.send.buffer.bytes=$KAFKA_SOCKET_SEND_BUFFER_BYTES" >> /opt/kafka/config/server.properties
echo "socket.receive.buffer.bytes=$KAFKA_SOCKET_RECEIVE_BUFFER_BYTES" >> /opt/kafka/config/server.properties
echo "socket.request.max.bytes=$KAFKA_SOCKET_REQUEST_MAX_BYTES" >> /opt/kafka/config/server.properties
echo "num.partitions=$KAFKA_NUM_PARTITIONS" >> /opt/kafka/config/server.properties
echo "num.recovery.threads.per.data.dir=$KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR" >> /opt/kafka/config/server.properties

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.
echo "offsets.topic.replication.factor=$KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR" >> /opt/kafka/config/server.properties
echo "transaction.state.log.replication.factor=$KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR" >> /opt/kafka/config/server.properties
echo "transaction.state.log.min.isr=$KAFKA_TRANSACTION_STATE_LOG_MIN_ISR" >> /opt/kafka/config/server.properties

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
echo "log.retention.hours=$KAFKA_LOG_RETENTION_HOURS" >> /opt/kafka/config/server.properties


# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
#log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
echo "log.retention.check.interval.ms=$KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS" >> /opt/kafka/config/server.properties


echo "zookeeper.connect=$KAFKA_ZOOKEEPER_CONNECT" >> /opt/kafka/config/server.properties
echo "zookeeper.connection.timeout.ms=$KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS" >> /opt/kafka/config/server.properties

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
echo "group.initial.rebalance.delay.ms=$KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS" >> /opt/kafka/config/server.properties


exec java -server ${JAVA_ARGS} \
    -Dcom.sun.management.jmxremote \
    -Dcom.sun.management.jmxremote.authenticate=false \
    -Dcom.sun.management.jmxremote.ssl=false \
    -Dcom.sun.management.jmxremote.local.only=false \
    -XX:MaxGCPauseMillis=20 \
    -XX:InitiatingHeapOccupancyPercent=35 \
    -XX:+ExplicitGCInvokesConcurrent \
    -XX:MaxInlineLevel=15 \
    -Djava.awt.headless=true \
    -Dlog4j.configuration=file:/opt/kafka/config/log4j.properties \
    -Dkafka.logs.dir=/opt/kafka/data \
    -classpath .:/opt/kafka/libs/* \
    kafka.Kafka /opt/kafka/config/server.properties